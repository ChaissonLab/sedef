/// 786 

/******************************************************************************/

#include <fstream>
#include <iostream>
#include <string>
#include <vector>
#include <locale>

#include "search_main.h"
#include "align_main.h"
#include "wgac.h"

using namespace std;

/******************************************************************************/

void print_help()
{
	eprn(
		"Basic usage: sedef [command] [parameters...] \n"
		"All menaingful output is redirected to stdout \n \n"
		"List of commands: \n"
		"- wgac \n"
		"  - align [genome.fa] [alignments.tab] \n"
		"    cleans the WGAC data in TAB format and generates the alignments for them \n"
		"  - check [genome.fa] [alignments.bed] \n"
		"    checks which WGAC alignments fail SEDEF SD procedure \n"
		"- search [reference_genome.fa] [chrQuery] [chrRef] ([reference_reversed]) \n"
		"    finds all initial SDs by aligning chrQuery onto the chrRef \n"
		"    set y or 1 to [reference_reversed] if you want reference to be reverse-complemented \n"
		"- align \n"
		"  - bucket [bed_directory(/)] [buckets/] [buckets] \n"
		"    bucket BEDs from [bed_directory] directory (or file) into the [buckets] files \n"
		"    in [buckets/] for more balanced parallel alignments \n"
		"  - generate [genome.fa] [initial.bed] \n"
		"    generates true alignments for initial.bed \n"
		"    WARNING: takes a lot of time \n"
//		"  - process [genome.fa] [aligned.bed] \n"
//		"    post-processes the alignments generated by the previous step \n"
		"- help \n"
		"    Displays this help message \n"
		"\n"
		"For all other inquiries please contact inumanag at mit dot edu."
	);
}

void test(int, char**);

int main(int argc, char **argv)
{
	ios_base::sync_with_stdio(0);
	setlocale(LC_NUMERIC, "en_US.UTF-8");
	if (argc < 3) {
		eprn("Arguments missing: please run sedef help for more information.");
		exit(1);
	}

	eprnn("🍁  🐚    SEDEF {}; arguments: ", string(GITVER) == "" ? "vpc" : GITVER);
	for (int i = 0; i < argc; i++) 
		eprnn(" {}", argv[i]);
	eprn("");
	// const int    KMER_SIZE      = 14;
	// const int    WINDOW_SIZE    = 16; // <-- Needs to be changed
	// static_assert(KMER_SIZE <= 16, "k-mer space is 32-bit");

	// const int    MIN_READ_SIZE  = 1000;
	// const double MAX_EDIT_ERROR = 0.15;
	// const double ERROR_RATIO    = (0.30 - MAX_EDIT_ERROR) / MAX_EDIT_ERROR;
	// const double MAX_GAP_ERROR  = MAX_EDIT_ERROR * ERROR_RATIO;
	// const double GAP_FREQUENCY  = 0.005;

	eprn("        Parameters: KMER_SIZE      = {}\n"
	     "                    WINDOW_SIZE    = {}\n"
	     "                    MIN_READ_SIZE  = {:n}\n"
	     "                    MAX_ERROR      = {:.2f}\n"
	     "                    MAX_EDIT_ERROR = {:.2f}\n"
	     "                    MAX_GAP_ERROR  = {:.2f}\n"
	     "                    GAP_FREQUENCY  = {:.3f}",
		KMER_SIZE, WINDOW_SIZE, MIN_READ_SIZE, 
		MAX_ERROR, MAX_EDIT_ERROR, MAX_GAP_ERROR, GAP_FREQUENCY);

	string command = argv[1];

	try {
		if (command == "help") {
			print_help();
			exit(0);
		} else if (command == "search") {
			bool is_complement = (argc > 5 && 
				(tolower(argv[5][0]) == 'y' || tolower(argv[5][0]) == '1'));
			search_main(argv[2], argv[3], argv[4], is_complement);
		} else if (command == "align") {
			align_main(argc - 2, argv + 2);
		} else if (command == "wgac") {
			wgac_main(argc - 2, argv + 2);
		} else if (command == "test") {
			test(argc - 2, argv + 2);
		} else {
			eprn("Whoops, invalid command!");
		}
	} catch (string &s) {
		eprn("Error: {}", s);
		exit(1);
	} catch (exception &e) {
		eprn("Error: {}", e.what());
		exit(1);
	} 
	
	return 0;
}